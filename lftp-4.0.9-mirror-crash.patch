diff -up lftp-4.0.9/src/Http.cc.orig lftp-4.0.9/src/Http.cc
--- lftp-4.0.9/src/Http.cc.orig	2017-08-31 09:56:15.000000000 -0400
+++ lftp-4.0.9/src/Http.cc	2017-08-31 09:59:52.000000000 -0400
@@ -65,13 +65,29 @@ CDECL char *strptime(const char *buf, co
 #define EINPROGRESS -1
 #endif
 
+Http::Connection::Connection(int s,const char *c)
+   : closure(c), sock(s)
+{
+}
+Http::Connection::~Connection()
+{
+   close(sock);
+   /* make sure we free buffers before ssl */
+   recv_buf=0;
+   send_buf=0;
+}
+void Http::Connection::MakeBuffers()
+{
+   send_buf=new IOBufferFDStream(
+      new FDStream(sock,"<output-socket>"),IOBuffer::PUT);
+   recv_buf=new IOBufferFDStream(
+      new FDStream(sock,"<input-socket>"),IOBuffer::GET);
+}
+
 void Http::Init()
 {
    state=DISCONNECTED;
    tunnel_state=NO_TUNNEL;
-   sock=-1;
-   send_buf=0;
-   recv_buf=0;
    body_size=-1;
    bytes_received=0;
    status_code=0;
@@ -127,9 +143,7 @@ Http::~Http()
 
 void Http::MoveConnectionHere(Http *o)
 {
-   send_buf=o->send_buf.borrow();
-   recv_buf=o->recv_buf.borrow();
-   sock=o->sock; o->sock=-1;
+   conn=o->conn.borrow();
    rate_limit=o->rate_limit.borrow();
    last_method=o->last_method; o->last_method=0;
    timeout_timer.Reset(o->timeout_timer);
@@ -140,14 +154,11 @@ void Http::MoveConnectionHere(Http *o)
 
 void Http::Disconnect()
 {
-   send_buf=0;
-   recv_buf=0;
    rate_limit=0;
-   if(sock!=-1)
+   if(conn)
    {
       LogNote(7,_("Closing HTTP connection"));
-      close(sock);
-      sock=-1;
+      conn=0;
    }
    if((mode==STORE && state!=DONE && real_pos>0)
    && !Error())
@@ -185,20 +196,20 @@ void Http::Close()
 {
    if(mode==CLOSED)
       return;
-   if(recv_buf)
-      recv_buf->Roll();	// try to read any remaining data
-   if(sock!=-1 && keep_alive && (keep_alive_max>0 || keep_alive_max==-1)
-   && mode!=STORE && !recv_buf->Eof() && (state==RECEIVING_BODY || state==DONE))
+   if(conn && conn->recv_buf)
+      conn->recv_buf->Roll();  // try to read any remaining data
+   if(conn && keep_alive && (keep_alive_max>0 || keep_alive_max==-1)
+   && mode!=STORE && !conn->recv_buf->Eof() && (state==RECEIVING_BODY || state==DONE))
    {
-      recv_buf->Resume();
-      recv_buf->Roll();
+      conn->recv_buf->Resume();
+      conn->recv_buf->Roll();
       if(xstrcmp(last_method,"HEAD"))
       {
 	 // check if all data are in buffer
 	 if(!chunked)	// chunked is a bit complex, so don't handle it
 	 {
-	    bytes_received+=recv_buf->Size();
-	    recv_buf->Skip(recv_buf->Size());
+            bytes_received+=conn->recv_buf->Size();
+            conn->recv_buf->Skip(conn->recv_buf->Size());
 	 }
 	 if(!(body_size>=0 && bytes_received==body_size))
 	    goto disconnect;
@@ -230,7 +241,7 @@ void Http::Send(const char *format,...)
    xstring& str=xstring::vformat(format,va);
    va_end(va);
    LogSend(5,str);
-   send_buf->Put(str);
+   conn->send_buf->Put(str);
 }
 
 void Http::SendMethod(const char *method,const char *efile)
@@ -663,7 +674,7 @@ void Http::SendRequest(const char *conne
    chunked_trailer=false;
    no_ranges=false;
 
-   send_buf->SetPos(0);
+   conn->send_buf->SetPos(0);
 }
 
 int Http::SendArrayInfoRequest()
@@ -889,7 +900,7 @@ void Http::GetBetterConnection(int level
    {
       Http *o=(Http*)fo; // we are sure it is Http.
 
-      if(o->sock==-1 || o->state==CONNECTING)
+      if(!o->conn || o->state==CONNECTING)
 	 continue;
 
       if(o->tunnel_state==TUNNEL_WAITING)
@@ -919,7 +930,7 @@ int Http::Do()
    int len;
 
    // check if idle time exceeded
-   if(mode==CLOSED && sock!=-1 && idle_timer.Stopped())
+   if(mode==CLOSED && conn && idle_timer.Stopped())
    {
       LogNote(1,_("Closing idle connection"));
       Disconnect();
@@ -1051,8 +1062,8 @@ int Http::Do()
       if(!NextTry())
       	 return MOVED;
 
-      sock=SocketCreateTCP(peer[peer_curr].sa.sa_family);
-      if(sock==-1)
+      res=SocketCreateTCP(peer[peer_curr].sa.sa_family);
+      if(res==-1)
       {
 	 if(peer_curr+1<peer.count())
 	 {
@@ -1068,9 +1079,10 @@ int Http::Do()
 	 SetError(SEE_ERRNO,str);
 	 return MOVED;
       }
+      conn=new Connection(res,hostname);
 
       SayConnectingTo();
-      res=SocketConnect(sock,&peer[peer_curr]);
+      res=SocketConnect(conn->sock,&peer[peer_curr]);
       if(res==-1 && errno!=EINPROGRESS)
       {
 	 int e=errno;
@@ -1086,7 +1098,7 @@ int Http::Do()
       timeout_timer.Reset();
 
    case CONNECTING:
-      res=Poll(sock,POLLOUT);
+      res=Poll(conn->sock,POLLOUT);
       if(res==-1)
       {
 	 NextPeer();
@@ -1100,7 +1112,7 @@ int Http::Do()
 	    NextPeer();
 	    return MOVED;
 	 }
-	 Block(sock,POLLOUT);
+         Block(conn->sock,POLLOUT);
 	 return m;
       }
 
@@ -1109,15 +1121,12 @@ int Http::Do()
 #if USE_SSL
       if(proxy?!strncmp(proxy,"https://",8):https)
       {
-	 MakeSSLBuffers();
+         conn->MakeSSLBuffers();
       }
       else
 #endif
       {
-	 send_buf=new IOBufferFDStream(
-	    new FDStream(sock,"<output-socket>"),IOBuffer::PUT);
-	 recv_buf=new IOBufferFDStream(
-	    new FDStream(sock,"<input-socket>"),IOBuffer::GET);
+         conn->MakeBuffers();
 #if USE_SSL
 	 if(proxy && https)
 	 {
@@ -1141,7 +1150,7 @@ int Http::Do()
 
       if(mode==QUOTE_CMD && !special)
 	 goto handle_quote_cmd;
-      if(recv_buf->Eof())
+      if(conn->recv_buf->Eof())
       {
 	 LogError(0,_("Peer closed connection"));
 	 Disconnect();
@@ -1179,31 +1188,31 @@ int Http::Do()
 	 rate_limit=new RateLimit(hostname);
 
    case RECEIVING_HEADER:
-      if(send_buf->Error() || recv_buf->Error())
+      if(conn->send_buf->Error() || conn->recv_buf->Error())
       {
 	 if((mode==STORE || special) && status_code && !H_20X(status_code))
 	    goto pre_RECEIVING_BODY;   // assume error.
       handle_buf_error:
-	 if(send_buf->Error())
+         if(conn->send_buf->Error())
 	 {
-	    LogError(0,"send: %s",send_buf->ErrorText());
-	    if(send_buf->ErrorFatal())
-	       SetError(FATAL,send_buf->ErrorText());
+           LogError(0,"send: %s",conn->send_buf->ErrorText());
+           if(conn->send_buf->ErrorFatal())
+              SetError(FATAL,conn->send_buf->ErrorText());
 	 }
-	 if(recv_buf->Error())
+	 if(conn->recv_buf->Error())
 	 {
-	    LogError(0,"recv: %s",recv_buf->ErrorText());
-	    if(recv_buf->ErrorFatal())
-	       SetError(FATAL,recv_buf->ErrorText());
+           LogError(0,"recv: %s",conn->recv_buf->ErrorText());
+           if(conn->recv_buf->ErrorFatal())
+              SetError(FATAL,conn->recv_buf->ErrorText());
 	 }
 	 Disconnect();
 	 return MOVED;
       }
-      timeout_timer.Reset(send_buf->EventTime());
-      timeout_timer.Reset(recv_buf->EventTime());
+      timeout_timer.Reset(conn->send_buf->EventTime());
+      timeout_timer.Reset(conn->recv_buf->EventTime());
       if(CheckTimeout())
 	 return MOVED;
-      recv_buf->Get(&buf,&len);
+      conn->recv_buf->Get(&buf,&len);
       if(!buf)
       {
 	 // eof
@@ -1224,14 +1233,14 @@ int Http::Do()
 	    if(eol==buf && status)
 	    {
 	       LogRecv(4,"");
-	       recv_buf->Skip(eol_size);
+               conn->recv_buf->Skip(eol_size);
 	       if(tunnel_state==TUNNEL_WAITING)
 	       {
 		  if(H_20X(status_code))
 		  {
 #if USE_SSL
 		     if(https)
-			MakeSSLBuffers();
+                        conn->MakeSSLBuffers();
 #endif
 		     tunnel_state=TUNNEL_ESTABLISHED;
 		     ResetRequestData();
@@ -1307,7 +1316,7 @@ int Http::Do()
 	    len=eol-buf;
 	    line.nset(buf,len);
 
-	    recv_buf->Skip(len+eol_size);
+            conn->recv_buf->Skip(len+eol_size);
 
 	    LogRecv(4,line);
 	    m=MOVED;
@@ -1331,7 +1340,7 @@ int Http::Do()
 		     state=DONE;
 		     return MOVED;
 		  }
-		  recv_buf->UnSkip(len+eol_size);
+                  conn->recv_buf->UnSkip(len+eol_size);
 		  goto pre_RECEIVING_BODY;
 	       }
 	       proto_version=(ver_major<<4)+ver_minor;
@@ -1393,7 +1402,7 @@ int Http::Do()
       }
 
       if(mode==STORE && (!status || H_CONTINUE(status_code)) && !sent_eot)
-	 Block(sock,POLLOUT);
+         Block(conn->sock,POLLOUT);
 
       return m;
 
@@ -1519,29 +1528,29 @@ int Http::Do()
       state=RECEIVING_BODY;
       m=MOVED;
    case RECEIVING_BODY:
-      if(recv_buf->Error() || send_buf->Error())
+      if(conn->recv_buf->Error() || conn->send_buf->Error())
 	 goto handle_buf_error;
-      if(recv_buf->Size()>=rate_limit->BytesAllowedToGet())
+      if(conn->recv_buf->Size()>=rate_limit->BytesAllowedToGet())
       {
-	 recv_buf->Suspend();
+         conn->recv_buf->Suspend();
 	 Timeout(1000);
       }
-      else if(recv_buf->Size()>=max_buf)
+      else if(conn->recv_buf->Size()>=max_buf)
       {
-	 recv_buf->Suspend();
+         conn->recv_buf->Suspend();
 	 m=MOVED;
       }
       else
       {
-	 if(recv_buf->IsSuspended())
+         if(conn->recv_buf->IsSuspended())
 	 {
-	    recv_buf->Resume();
-	    if(recv_buf->Size()>0 || (recv_buf->Size()==0 && recv_buf->Eof()))
+            conn->recv_buf->Resume();
+            if(conn->recv_buf->Size()>0 || (conn->recv_buf->Size()==0 && conn->recv_buf->Eof()))
 	       m=MOVED;
 	 }
-	 timeout_timer.Reset(send_buf->EventTime());
-	 timeout_timer.Reset(recv_buf->EventTime());
-	 if(recv_buf->Size()==0)
+         timeout_timer.Reset(conn->send_buf->EventTime());
+         timeout_timer.Reset(conn->recv_buf->EventTime());
+         if(conn->recv_buf->Size()==0)
 	 {
 	    // check if ranges were emulated by squid
 	    bool no_ranges_if_timeout=(bytes_received==0 && !seen_ranges_bytes);
@@ -1586,17 +1595,13 @@ void  Http::ClassInit()
 
 void Http::SuspendInternal()
 {
-   if(recv_buf)
-      recv_buf->SuspendSlave();
-   if(send_buf)
-      send_buf->SuspendSlave();
+   if(conn)
+      conn->SuspendInternal();
 }
 void Http::ResumeInternal()
 {
-   if(recv_buf)
-      recv_buf->ResumeSlave();
-   if(send_buf)
-      send_buf->ResumeSlave();
+   if(conn)
+      conn->ResumeInternal();
 }
 
 int Http::Read(void *buf,int size)
@@ -1626,15 +1631,15 @@ int Http::_Read(void *buf,int size)
    const char *buf1;
    int size1;
 get_again:
-   if(recv_buf->Size()==0 && recv_buf->Error())
+   if(conn->recv_buf->Size()==0 && conn->recv_buf->Error())
    {
-      LogError(0,"recv: %s",recv_buf->ErrorText());
-      if(recv_buf->ErrorFatal())
-	 SetError(FATAL,recv_buf->ErrorText());
+      LogError(0,"recv: %s",conn->recv_buf->ErrorText());
+      if(conn->recv_buf->ErrorFatal())
+        SetError(FATAL,conn->recv_buf->ErrorText());
       Disconnect();
       return DO_AGAIN;
    }
-   recv_buf->Get(&buf1,&size1);
+   conn->recv_buf->Get(&buf1,&size1);
    if(buf1==0) // eof
    {
       LogNote(9,_("Hit EOF"));
@@ -1672,7 +1677,7 @@ get_again:
 	 if(nl==0)  // not yet
 	 {
 	 not_yet:
-	    if(recv_buf->Eof())
+           if(conn->recv_buf->Eof())
 	       Disconnect();	 // connection closed too early
 	    return DO_AGAIN;
 	 }
@@ -1682,7 +1687,7 @@ get_again:
 	    Fatal(_("chunked format violated"));
 	    return FATAL;
 	 }
-	 recv_buf->Skip(nl-buf1+1);
+         conn->recv_buf->Skip(nl-buf1+1);
 	 chunk_pos=0;
 	 goto get_again;
       }
@@ -1704,7 +1709,7 @@ get_again:
 	    Fatal(_("chunked format violated"));
 	    return FATAL;
 	 }
-	 recv_buf->Skip(2);
+         conn->recv_buf->Skip(2);
 	 chunk_size=-1;
 	 goto get_again;
       }
@@ -1733,7 +1738,7 @@ get_again:
       off_t to_skip=pos-real_pos;
       if(to_skip>size1)
 	 to_skip=size1;
-      recv_buf->Skip(to_skip);
+      conn->recv_buf->Skip(to_skip);
       real_pos+=to_skip;
       bytes_received+=to_skip;
       if(chunked)
@@ -1743,7 +1748,7 @@ get_again:
    if(size>size1)
       size=size1;
    memcpy(buf,buf1,size);
-   recv_buf->Skip(size);
+   conn->recv_buf->Skip(size);
    if(chunked)
       chunk_pos+=size;
    real_pos+=size;
@@ -1759,7 +1764,7 @@ int Http::Done()
       return error_code;
    if(state==DONE)
       return OK;
-   if(mode==CONNECT_VERIFY && (peer || sock!=-1))
+   if(mode==CONNECT_VERIFY && (peer || conn))
       return OK;
    if((mode==REMOVE || mode==REMOVE_DIR || mode==RENAME)
    && state==RECEIVING_BODY)
@@ -1769,9 +1774,9 @@ int Http::Done()
 
 int Http::Buffered()
 {
-   if(mode!=STORE || !send_buf)
+   if(mode!=STORE || !conn || !conn->send_buf)
       return 0;
-   return send_buf->Size()+SocketBuffered(sock);
+   return conn->send_buf->Size()+SocketBuffered(conn->sock);
 }
 
 int Http::Write(const void *buf,int size)
@@ -1784,7 +1789,7 @@ int Http::Write(const void *buf,int size
    if(Error())
       return(error_code);
 
-   if(state!=RECEIVING_HEADER || status!=0 || send_buf->Size()!=0)
+   if(state!=RECEIVING_HEADER || status!=0 || conn->send_buf->Size()!=0)
       return DO_AGAIN;
 
    {
@@ -1794,8 +1799,8 @@ int Http::Write(const void *buf,int size
       if(size>allowed)
 	 size=allowed;
    }
-   if(size+send_buf->Size()>=max_buf)
-      size=max_buf-send_buf->Size();
+   if(size+conn->send_buf->Size()>=max_buf)
+      size=max_buf-conn->send_buf->Size();
    if(entity_size!=NO_SIZE && pos+size>entity_size)
    {
       size=entity_size-pos;
@@ -1806,9 +1811,9 @@ int Http::Write(const void *buf,int size
    if(size<=0)
       return 0;
 
-   send_buf->Put((const char*)buf,size);
+   conn->send_buf->Put((const char*)buf,size);
 
-   if(retries>0 && send_buf->GetPos()-send_buf->Size()>Buffered()+0x1000)
+   if(retries>0 && conn->send_buf->GetPos()-conn->send_buf->Size()>Buffered()+0x1000)
       TrySuccess();
    rate_limit->BytesPut(size);
    pos+=size;
@@ -1824,11 +1829,11 @@ int Http::SendEOT()
       return(error_code);
    if(mode==STORE)
    {
-      if(state==RECEIVING_HEADER && send_buf->Size()==0)
+      if(state==RECEIVING_HEADER && conn->send_buf->Size()==0)
       {
 	 if(entity_size==NO_SIZE || pos<entity_size)
 	 {
-	    shutdown(sock,1);
+            shutdown(conn->sock,1);
 	    keep_alive=false;
 	 }
 	 sent_eot=true;
@@ -1910,8 +1915,8 @@ void Http::Reconfig(const char *name)
       SetProxy(p);
    }
 
-   if(sock!=-1)
-      SetSocketBuffer(sock);
+   if(conn)
+      SetSocketBuffer(conn->sock);
    if(proxy && proxy_port==0)
       proxy_port.set(HTTP_DEFAULT_PROXY_PORT);
 
@@ -2152,9 +2157,9 @@ Https::Https(const Https *o) : super(o)
 }
 FileAccess *Https::New(){ return new Https();}
 
-void Http::MakeSSLBuffers()
+void Http::Connection::MakeSSLBuffers()
 {
-   ssl=new lftp_ssl(sock,lftp_ssl::CLIENT,hostname);
+   ssl=new lftp_ssl(sock,lftp_ssl::CLIENT,closure);
    ssl->load_keys();
    IOBufferSSL *send_buf_ssl=new IOBufferSSL(ssl,IOBuffer::PUT);
    IOBufferSSL *recv_buf_ssl=new IOBufferSSL(ssl,IOBuffer::GET);
@@ -2213,10 +2218,10 @@ void Http::CleanupThis()
 
 void Http::LogErrorText()
 {
-   if(!recv_buf)
+   if(!conn || !conn->recv_buf)
       return;
-   recv_buf->Roll();
-   int size=recv_buf->Size();
+   conn->recv_buf->Roll();
+   int size=conn->recv_buf->Size();
    if(size==0)
       return;
    char *buf=string_alloca(size+1);
diff -up lftp-4.0.9/src/Http.h.orig lftp-4.0.9/src/Http.h
--- lftp-4.0.9/src/Http.h.orig	2017-08-31 09:56:27.000000000 -0400
+++ lftp-4.0.9/src/Http.h	2017-08-31 09:56:40.000000000 -0400
@@ -52,8 +52,36 @@ class Http : public NetAccess
 
    void	Send(const char *format,...) PRINTF_LIKE(2,3);
 
-   SMTaskRef<IOBuffer> send_buf;
-   SMTaskRef<IOBuffer> recv_buf;
+   class Connection
+   {
+      xstring_c closure;
+   public:
+      int sock;
+      SMTaskRef<IOBuffer> send_buf;
+      SMTaskRef<IOBuffer> recv_buf;
+      void MakeBuffers();
+#if USE_SSL
+      Ref<lftp_ssl> ssl;
+      void MakeSSLBuffers();
+#endif
+
+      void SuspendInternal()
+      {
+        if(send_buf) send_buf->SuspendSlave();
+        if(recv_buf) recv_buf->SuspendSlave();
+      }
+      void ResumeInternal()
+      {
+        if(send_buf) send_buf->ResumeSlave();
+        if(recv_buf) recv_buf->ResumeSlave();
+      }
+
+      Connection(int s,const char *c);
+      ~Connection();
+   };
+
+   Ref<Connection> conn;
+
    void SendMethod(const char *,const char *);
    const char *last_method;
    enum { HTTP_NONE=0, HTTP_POST, HTTP_MOVE, HTTP_COPY } special;
@@ -77,18 +105,15 @@ class Http : public NetAccess
    void CookieMerge(xstring &c,const char *add);
    bool CookieClosureMatch(const char *closure,const char *host,const char *path);
 
-   int sock;
    void Disconnect();
    void ResetRequestData();
    void MoveConnectionHere(Http *o);
    int IsConnected() const
       {
+        if(!conn)
+            return 0;
          return state!=DISCONNECTED || tunnel_state!=NO_TUNNEL;
       }
-#if USE_SSL
-   Ref<lftp_ssl> ssl;
-   void MakeSSLBuffers();
-#endif
    void LogErrorText();
 
    xstring status;
